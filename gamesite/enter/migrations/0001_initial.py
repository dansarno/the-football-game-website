# Generated by Django 3.1.3 on 2021-02-28 18:00

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('success', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CalledBet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='ChoiceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('when_called', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('country_code', models.CharField(default='', max_length=3)),
                ('flag', models.ImageField(upload_to='flags_and_logos')),
            ],
            options={
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_submitted', models.DateTimeField(blank=True, null=True)),
                ('has_paid', models.BooleanField(default=False)),
                ('has_submitted', models.BooleanField(default=False)),
                ('current_position', models.IntegerField(blank=True, null=True)),
                ('current_score', models.IntegerField(default=0)),
                ('label', models.CharField(blank=True, max_length=1, null=True)),
            ],
            options={
                'verbose_name_plural': 'entries',
            },
        ),
        migrations.CreateModel(
            name='FiftyFiftyQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('A', 'Group A'), ('B', 'Group B'), ('C', 'Group C'), ('D', 'Group D'), ('E', 'Group E'), ('F', 'Group F')], max_length=1)),
                ('goals_scored', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_number', models.IntegerField()),
                ('ko_time', models.DateTimeField()),
                ('result', models.CharField(blank=True, choices=[('H', 'Home'), ('A', 'Away'), ('D', 'Draw')], max_length=1)),
            ],
            options={
                'verbose_name_plural': 'matches',
            },
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winning_amount', models.IntegerField()),
                ('choice_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='enter.choicegroup')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_enter.outcome_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('goals_scored', models.IntegerField(default=0)),
                ('red_cards', models.IntegerField(default=0)),
                ('own_goals', models.IntegerField(default=0)),
                ('hatricks', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='FinalMatch',
            fields=[
                ('match_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.match')),
                ('first_goal_period', models.CharField(blank=True, choices=[('1H', 'First Half'), ('2H', 'Second Half'), ('1E', 'First Half of Extra Time'), ('2E', 'Second Half of Extra Time'), ('PS', 'Penality Shootout')], max_length=2, null=True)),
                ('own_goal', models.BooleanField(default=False)),
                ('yellow_cards', models.IntegerField(blank=True, default=0, null=True)),
                ('goals', models.IntegerField(blank=True, default=0, null=True)),
                ('ref_continent', models.CharField(blank=True, choices=[('EU', 'European'), ('SA', 'South American'), ('OT', 'Other Continent')], max_length=2, null=True)),
            ],
            options={
                'verbose_name_plural': 'final matches',
            },
            bases=('enter.match',),
        ),
        migrations.CreateModel(
            name='GroupMatch',
            fields=[
                ('match_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.match')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.group')),
            ],
            options={
                'verbose_name_plural': 'group matches',
            },
            bases=('enter.match',),
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('city', models.CharField(max_length=20)),
                ('capacity', models.IntegerField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.country')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='flags_and_logos')),
                ('is_top_team', models.BooleanField(default=False)),
                ('goals_scored', models.IntegerField(default=0)),
                ('yellow_cards', models.IntegerField(default=0)),
                ('seconds_to_first_yellow', models.IntegerField(default=5400)),
                ('seconds_to_first_goal', models.IntegerField(default=5400)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.country')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='enter.group')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('called_bet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.calledbet')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_logs', to='enter.entry')),
            ],
        ),
        migrations.CreateModel(
            name='PositionLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('called_bet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.calledbet')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='position_logs', to='enter.entry')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('goals_scored', models.IntegerField(default=0)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='away_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_away_team', to='enter.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='home_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_home_team', to='enter.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='venue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.venue'),
        ),
        migrations.AddField(
            model_name='entry',
            name='bets',
            field=models.ManyToManyField(through='enter.Bet', to='enter.Outcome'),
        ),
        migrations.AddField(
            model_name='entry',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='users.profile'),
        ),
        migrations.AddField(
            model_name='calledbet',
            name='outcome',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.outcome'),
        ),
        migrations.AddField(
            model_name='bet',
            name='called_bet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='enter.calledbet'),
        ),
        migrations.AddField(
            model_name='bet',
            name='entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.entry'),
        ),
        migrations.AddField(
            model_name='bet',
            name='outcome',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.outcome'),
        ),
        migrations.CreateModel(
            name='ToWinOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('team', models.ForeignKey(limit_choices_to={'is_top_team': True}, on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='TournamentRedCardsOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('min_value', models.IntegerField()),
                ('max_value', models.IntegerField()),
                ('is_highest_value', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.tournament')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='TournamentOwnGoalsOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('min_value', models.IntegerField()),
                ('max_value', models.IntegerField()),
                ('is_highest_value', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.tournament')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='TournamentHattricksOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('min_value', models.IntegerField()),
                ('max_value', models.IntegerField()),
                ('is_highest_value', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.tournament')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='TournamentGoalsOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('min_value', models.IntegerField()),
                ('max_value', models.IntegerField()),
                ('is_highest_value', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.tournament')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='ToReachSemiFinalOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('team', models.ForeignKey(limit_choices_to={'is_top_team': True}, on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='ToReachFinalOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('team', models.ForeignKey(limit_choices_to={'is_top_team': True}, on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='TopGoalScoringPlayerOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.player')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='TopGoalScoringGroupOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.group')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='MostYellowCardsOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('team', models.ForeignKey(limit_choices_to={'is_top_team': True}, on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='HighestScoringTeamOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('team', models.ForeignKey(limit_choices_to={'is_top_team': True}, on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='GroupWinnerOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.group')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='GroupMatchOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('choice', models.CharField(choices=[('H', 'Home'), ('A', 'Away'), ('D', 'Draw')], max_length=1)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.groupmatch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FinalYellowCardsOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('min_value', models.IntegerField()),
                ('max_value', models.IntegerField()),
                ('is_highest_value', models.BooleanField(default=False)),
                ('final', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.finalmatch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FinalRefContinentOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('choice', models.CharField(choices=[('EU', 'European'), ('SA', 'South American'), ('OT', 'Other Continent')], max_length=2)),
                ('final', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.finalmatch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FinalOwnGoalOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('choice', models.BooleanField()),
                ('final', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.finalmatch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FinalGoalsOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('min_value', models.IntegerField()),
                ('max_value', models.IntegerField()),
                ('is_highest_value', models.BooleanField(default=False)),
                ('final', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.finalmatch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FinalFirstGoalOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('choice', models.CharField(choices=[('1H', 'First Half'), ('2H', 'Second Half'), ('1E', 'First Half of Extra Time'), ('2E', 'Second Half of Extra Time'), ('PS', 'Penality Shootout')], max_length=2)),
                ('final', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.finalmatch')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FiftyFiftyOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('choice', models.BooleanField()),
                ('fifty_fifty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='enter.fiftyfiftyquestion')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FastestYellowCardsOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('team', models.ForeignKey(limit_choices_to={'is_top_team': True}, on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
        migrations.CreateModel(
            name='FastestGoalOutcome',
            fields=[
                ('outcome_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='enter.outcome')),
                ('team', models.ForeignKey(limit_choices_to={'is_top_team': True}, on_delete=django.db.models.deletion.CASCADE, to='enter.team')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('enter.outcome',),
        ),
    ]
